Source: markupsafe
Section: python
Priority: optional
Maintainer: Piotr OÅ¼arowski <piotr@debian.org>
Uploaders: Debian Python Modules Team <python-modules-team@lists.alioth.debian.org>
Build-Depends: debhelper (>= 5),
 python-all-dev (>= 2.6.5-2), python3-all-dev (>= 3.1.2-8~),
 python-all-dbg, python3-all-dbg,
 python-setuptools, python3-setuptools
Standards-Version: 3.9.2
Homepage: http://pypi.python.org/pypi/MarkupSafe
Vcs-Svn: svn://svn.debian.org/python-modules/packages/markupsafe/trunk
Vcs-Browser: http://svn.debian.org/viewsvn/python-modules/packages/markupsafe/trunk/
XS-Python-Version: >= 2.4

Package: python-markupsafe
Architecture: any
Depends: ${misc:Depends}, ${python:Depends}, ${shlibs:Depends}
Provides: ${python:Provides}
Description: XML/HTML/XHTML Markup safe string for Python
 MarkupSafe implements a unicode subclass that supports HTML strings:
 .
  >>> from markupsafe import Markup, escape
  >>> escape("<script>alert(document.cookie);</script>")
  Markup(u'&lt;script&gt;alert(document.cookie);&lt;/script&gt;')
  >>> tmpl = Markup("<em>%s</em>")
  >>> tmpl % "Peter > Lustig"
  Markup(u'<em>Peter &gt; Lustig</em>')
 .
 If you want to make an object unicode that is not yet unicode
 but don't want to lose the taint information, you can use the
 `soft_unicode` function:
 .
  >>> from markupsafe import soft_unicode
  >>> soft_unicode(42)
  u'42'
  >>> soft_unicode(Markup('foo'))
  Markup(u'foo')

Package: python-markupsafe-dbg
Architecture: any
Section: debug
Priority: extra
Depends: python-markupsafe (= ${binary:Version}), ${shlibs:Depends}, ${misc:Depends}, ${python:Depends}
Description: XML/HTML/XHTML Markup safe string for Python
 This package contains the extension built for the Python debug interpreter.

Package: python3-markupsafe
Architecture: any
Depends: ${misc:Depends}, ${python3:Depends}, ${shlibs:Depends}
Description: XML/HTML/XHTML Markup safe string for Python3
 MarkupSafe implements a unicode subclass that supports HTML strings:
 .
  >>> from markupsafe import Markup, escape
  >>> escape("<script>alert(document.cookie);</script>")
  Markup('&lt;script&gt;alert(document.cookie);&lt;/script&gt;')
  >>> tmpl = Markup("<em>%s</em>")
  >>> tmpl % "Peter > Lustig"
  Markup('<em>Peter &gt; Lustig</em>')
 .
 If you want to make an object unicode that is not yet unicode
 but don't want to lose the taint information, you can use the
 `soft_unicode` function:
 .
  >>> from markupsafe import soft_unicode
  >>> soft_unicode(42)
  '42'
  >>> soft_unicode(Markup('foo'))
  Markup('foo')

Package: python3-markupsafe-dbg
Architecture: any
Section: debug
Priority: extra
Depends: python3-markupsafe (= ${binary:Version}), ${shlibs:Depends}, ${misc:Depends}, ${python3:Depends}
Description: XML/HTML/XHTML Markup safe string for Python3
 This package contains the extension built for the Python3 debug interpreter.
